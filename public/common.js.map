{"version":3,"sources":["./src/app/_services/meetups/meetup.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore } from 'angularfire2/firestore';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as moment from 'moment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeetupService {\n\n\n    ref = firebase.firestore().collection('users');\n\n  constructor(\n    private firestore: AngularFirestore,\n    public afs: AngularFirestore,\n    private httpService: HttpClient\n  ) {\n  }\n\n  generateUniqNumber(length?: any) {\n    var length = length || 8,\n      charset = \"0123456789\",\n      retVal = \"\";\n    for (var i = 0, n = charset.length; i < length; ++i) {\n      retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n    return retVal;\n  }\n\n  // updateMeetups(uid: string, user: any) {\n  //   user.timeStamp = moment().format('x')\n  //   return this.afs.doc('meetups/' + uid).set(user);\n  // }\n  updateMeetups(uid: string, data: any) {\n  data.timeStamp = moment().format('x')\n  return this.afs.doc('meetups/' + data.id).set(data);\n}\n\n  addMeetups(data: any) {\n    data.timeStamp = moment().format('x')\n    return firebase.firestore().collection('meetups').add(data);\n  }\n\n  deleteMeetupsById(id) {\n  return this.afs.doc('meetups/' + id).delete();\n}\n\n  getAllMeetups() {\n    return new Promise((resolve) => {\n      this.firestore.collection('meetups').snapshotChanges()\n        .subscribe(meetups => {\n          let contactList = meetups.map(item => {\n            return {\n              ...item.payload.doc.data() as {},\n              id: item.payload.doc.id\n            };\n          });\n          resolve(contactList);\n        })\n    })\n  }\n\n  getMeetupsById(id: any) {\n    return new Promise((resolve) => {\n      var docRef = this.firestore.collection(\"meetups\").doc(id);\n\n      docRef.ref.get().then(function(doc) {\n        if (doc.exists) {\n          let res = { ...doc.data()  as {} , id: doc.id }\n          resolve(res)\n        }\n      }).catch(function(error) {\n        resolve(null);\n      });\n    })\n  }\n\n  getMeetupsBId(meetupsId: any) {\n    return new Promise((resolve) => {\n      this.firestore.collection('meetups',\n        ref => ref.where('meetupsId', '==', parseInt(meetupsId))).snapshotChanges()\n        .subscribe(meetups => {\n          let contactList = meetups.map(item => {\n            return {\n              ...item.payload.doc.data() as {},\n              id: item.payload.doc.id\n            };\n          });\n          resolve(contactList);\n        })\n    })\n  }\n\n\n\n  }\n"],"sourceRoot":"webpack:///"}